요즘 개발 이야기, 함수형 프로그래밍 정의

요즘 개발 ? : 그렇지만 타협할 수 없는 생산성!
*CSP : 콘텐츠 보안 정책 (http content-security-policy)

*ELB : Elastic Load Balancing 시스템에 가해지는 부하를 여러대의 시스템으로 분산해서 규모있는 시스템을 만들 수 있도록 해주는 단일 진입점
*Auto Scaling : Auto Scaling은 EC2 인스턴스를 자동으로 생성하고 삭제해주는 서비스 (아마존)

*OTP Supervisor : 슈퍼바이저(Supervisor)는 다른 프로세스의 감시라는 단 하나의 목적에 특화된 프로세스입니다. 자식 프로세스가 실패하면 자동으로 재시작해주는 것으로 장애에 대한 내성이 높은(Fault-tolerant) 애플리케이션을 만들 수 있게 해줍니다

재미 / 실시간성 : 라이브 방송, 실시간 댓글, 협업, 메신저

독창성 / 완성도 : 애니메이션 , 무한 스크롤 , 벽돌

더 많아져야하는 동시성 : 비동기 I/O , CSP , Actor ,STM ..

더 빨라야하는 반응성 / 고가용성(죽지않는 서비스) : ELB , Auto Scaling , OTP Supervisor ...

대용량 / 정확성 / 병렬성 : MapReduce , Clojure Reducers ...

복잡도 / MSA /  : 많아지고 세밀해지는 도구들 (여러 프레임워크들이 합쳐져서 만들어지는 프로그램들)




- 좋아지는 하드웨어 성능
- 좋아지는 컴파일러
- 함수형 프로그래밍 기술
- 좋아지는 분산 / 리액티브환경
- 동시성 + 병렬성 관련 기술
- 성공적인 적용 사례와 영향



함수형 프로그래밍은 애플리케이션, 함수의 구성요소, 더 나아가서 언어 자체를 함수처럼 여기도록 만들고, 이러한 함수 개념을 가장 우선 순위에 놓는다.

함수형 사고방식은 문제의 해결 방법을 동사(함수)들로 구성(조합) 하는 것

    마이클 포거스 [클로저 프로그래밍의 즐거움]에서 ..


/* 데이터 (객체) 기준 */
// 객체지향 프로그래밍
duck.moveLeft();
duck.moveRight();
dog.moveLeft();
dog.moveRight();


/* 함수 기준 */
// 함수형 프로그래밍
moveLeft(dog);
moveRight(duck);
moveLeft({ x: 5, y: 2});
moveRight(dog);


왜? 보다는 어떻게! 
- 함수형 프로그래밍을 어떻게 하느냐를 설명하려고 한다.

- 어떻게 전환해 왔는가 ? 를 알아야 공부하기 좋다.

- 기존에 코드를 어떻게 전환해 왔는지를 알아보자.