클로저란?
MDN에서는 클로저를 다음과 같이 정의하고 있다.

클로저는 독립적인 (자유) 변수를 가리키는 함수이다. 또는, 클로저 안에 정의된 함수는 만들어진 환경을 ‘기억한다’.

02.html script 부분에서는 add_maker함수 예제를 다루었다.

다른 예제 코드를 보자

function getClosure() {
    var text = 'variable 1';
    return function() {
        return text;
    };
}

var closure = getClosure();
console.log(closure()); // 'variable 1'

getClosure() 는 함수를 반환하고, 반환되는 함수는 getClosure() 내부에서 선언된 변수를 참조하고 있다. 또한 이렇게 참조된 변수는 함수 실행이 끝났다고 해서 사라지지 않았고, 여전히 제대로 된 값을 반환한다.

다른 예제 코드를 살펴본다.

var base = 'Hello, ';
function sayHelloTo(name){
    var text = base + name;
    return function() {
        console.log(text);
    };
}

var hello1 = sayHelloTo('운서');
var hello2 = sayHelloTo('지혜');
var hello3 = sayHelloTo('용정');

hello1();
hello2();
hello3();

출력된 결과를 보면 text 변수가 동적으로 변화하고 있는 것처럼 보인다.
실제로 text 라는 변수 자체가 여러번 생성된 것이다. 즉, hello1() 과 hello2(), hello3() 은 서로 다른 환경을 가지고 있다.

순수함수로 유리해지는것
-비동기가 일어나는 시점이나, 동시성이 필요한 시점에서 특정한 함수를 실행하는 시점까지 값으로로 다루다가 , 원하는 시점에서 평가하거나 여러번 실행한다거나 하는 상황에서 사용할 수 있다.